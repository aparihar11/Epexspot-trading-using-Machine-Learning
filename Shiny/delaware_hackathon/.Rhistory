geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800","#00e70b")) +
theme_minimal()
ggplot(d2, aes(datetime, ActualTotalLoad)) + geom_line() +
scale_color_manual(values = "#00AFBB") +
xlab("") + ylab("Load")
ggplot(d3, aes(datetime, IntradayPrice)) + geom_line() +
xlab("") + ylab("Daily Views")
ggplot(d3, aes(datetime, ActualTotalLoad)) + geom_line() +
scale_color_manual(values = "#00AFBB") +
xlab("") + ylab("Load")
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
#md3<-merge(d3,d2[,c("ActualTotalLoad","datetime")],by="datetime")
d2<-d2[32000:35024,]
ggplot(d2, aes(datetime, ActualTotalLoad)) + geom_line() +
scale_color_manual(values = "#00AFBB") +
xlab("") + ylab("Load")
#md3<-merge(d3,d2[,c("ActualTotalLoad","datetime")],by="datetime")
d2<-d2[32000:35000,]
ggplot(d2, aes(datetime, ActualTotalLoad)) + geom_line() +
scale_color_manual(values = "#00AFBB") +
xlab("") + ylab("Load")
d2<-nq.omit(d2)
d2<-na.omit(d2)
ggplot(d2, aes(datetime, ActualTotalLoad)) + geom_line() +
scale_color_manual(values = "#00AFBB") +
xlab("") + ylab("Load")
d3$Dayahead_Load.Forecast
ggplot(d3, aes(datetime, Dayahead_Load.Forecast)) + geom_line() +
scale_color_manual(values = "#00AFBB") +
xlab("") + ylab("Load")
d2<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/datamart.csv")
myvars <- c("datetime", "ActualTotalLoad")
newdata <- d2[myvars]
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
myvars <- c("datetime", "ActualTotalLoad")
newdata <- d2[myvars]
d1<-merge(d3,d2[,c("ActualTotalLoad","datetime")],by="datetime")
View(d1)
d1<-merge(d2,d3,by="datetime")
d1<-merge(d2,d3,by="datetime")
d1<-merge(d2,newdata,by="datetime")
View(d1)
d1<-merge(d3,newdata,by="datetime")
View(newdata)
myvars <- c("datetime", "ActualTotalLoad")
newdata <- d2[myvars]
d1<-merge(d3,newdata,by="datetime")
View(d1)
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
d3$datetime=ISOdatetime(year(d3$fromdate), month(d3$fromdate), day(d3$fromdate), d3$fromtime, 0, 0)
d1<-merge(d3,newdata,by="datetime")
View(d2)
d3<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/basetableApril14.csv")
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
d3$datetime=ISOdatetime(year(d3$fromdate), month(d3$fromdate), day(d3$fromdate), d3$fromtime, 0, 0)
myvars <- c("datetime", "ActualTotalLoad")
newdata <- d2[myvars]
View(newdata)
d1<-merge(d3,newdata,by="datetime",all = TRUE)
View(d1)
d1<-merge(newdata,d3,by="datetime",all = TRUE)
View(d1)
d1<-merge(newdata,d3,by="datetime",all.d3 = TRUE)
d1<-merge(newdata,d3,by="datetime",all = TRUE)
View(d1)
View(d1)
head(d3)
head(d2)
head(d3)
class(d2$datetime)
class(d3$datetime)
head(d2$datetime)
d2$fromdate<-as.Date(d2$fromdate)
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
class(d2$datetime)
head(d2$datetime)
head(d3$datetime)
head(d2$datetime)
head(d2$fromdate)
View(d2)
d2<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/datamart.csv")
head(d2$fromdate)
d2$fromdate<-as.Date(d2$fromdate)
head(d2$fromdate)
d2<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/datamart.csv")
d2$fromdate<-as.Date(d2$fromdate,format="%d/%m/%Y")
d2<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/datamart.csv")
d2$fromdate<-as.Date(d2$fromdate,format="%d/%m/%Y")
head(d2$fromdate)
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
myvars <- c("datetime", "ActualTotalLoad")
newdata <- d2[myvars]
d1<-merge(newdata,d3,by="datetime",all = TRUE)
View(d1)
d1$Dayahead_Load.Forecast
d4 <- d3 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 3)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d3 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d1 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
dim(d1)
d1<-d1[32000:35088,]
d4 <- d1 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d1<-d1[34000:35088,]
d4 <- d1 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d1<-d1[30000:35088,]
d4 <- d1 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
View(d1)
d1<-d1[20000:25000,]
d4 <- d1 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d1<-merge(newdata,d3,by="datetime",all = TRUE)
d4 <- d1 %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d1 %>% filter(datetime == "2018")
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d1 %>% filter(datetime == "2018") %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d1 %>% (datetime >= as.Date('2016-08-15') & datetime <= as.Date('2016-10-15')) %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d1 %>% filter(datetime >= as.Date('2016-08-15') & datetime <= as.Date('2016-10-15')) %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d1 %>% filter(datetime >= as.Date('2016-08-15') & datetime <= as.Date('2016-10-15')) %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
d1 %>% filter(datetime >= as.Date('2016-08-15') & datetime <= as.Date('2016-10-15'))
d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
d4 %>% d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 %>% d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC")) %>%
select(datetime, ActualTotalLoad, Dayahead_Load.Forecast) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 2)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Actual vs Forecasted Load")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
theme_minimal()
d1$diffloadforecast<-d1$Dayahead_Load.Forecast-d1$ActualTotalLoad
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC")) %>%
ggplot(d3, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC")) %>%
ggplot(d4, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views"
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC")) %>%
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC")) %>%
ggplot(d4, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
d4 <- d3 %>%
select(datetime, TMIN, TMAX,TAVG) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 3)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Temerature Variation")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800","#00e70b")) +
theme_minimal()
ggplot(d4, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")+geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = "#00AFBB") +
theme_minimal()
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")+geom_line(aes(color = diffloadforecast), size = 1) +
scale_color_manual(values = "#00AFBB") +
theme_minimal()
ggplot(d1, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
d4 <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
ggplot(d4, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
loaddiff <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
ggplot(loaddiff, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views")
ggplot(loaddiff, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views") +  geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = "#00AFBB") +
theme_minimal()
ggplot(loaddiff, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views") +  geom_line(aes(color = diffloadforecast), size = 1) +
scale_color_manual(values = "#00AFBB") +
theme_minimal()
ggplot(loaddiff, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Daily Views") +  geom_line(aes(color = "#00AFBB"), size = 1)
loaddiff <- d1 %>% filter(datetime >= as.POSIXct("2016-07-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2016-08-01 01:00:00", tz="UTC"))
ggplot(loaddiff, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Skewness Load Forecast") +  geom_line(aes(color = "#00AFBB"), size = 1)
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
###reading previous dataset
d2<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/datamart.csv")
d2$fromdate<-as.Date(d2$fromdate,format="%d/%m/%Y")
###adding current dataset
d3<-read.csv("C:/Users/aparihar/Documents/GitHub/electric_delware/basetableApril14.csv")
d2$datetime=ISOdatetime(year(d2$fromdate), month(d2$fromdate), day(d2$fromdate), d2$fromtime, 0, 0)
d3$datetime=ISOdatetime(year(d3$fromdate), month(d3$fromdate), day(d3$fromdate), d3$fromtime, 0, 0)
###merging data
myvars <- c("datetime", "ActualTotalLoad")
newdata <- d2[myvars]
d1<-merge(newdata,d3,by="datetime",all = TRUE)
d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
View(d1)
d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
View(d1)
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
View(d2)
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
dayheadchart %>% filter(datetime >= as.POSIXct("2018-12-31 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("") + ylab("Daily Views")
dayheadchart %>% d1 %>% filter(datetime >= as.POSIXct("2018-12-31 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("") + ylab("Daily Views")
dayheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-12-31 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("") + ylab("Daily Views")
d1$DayaheadPrice._EUR_MWh
dayheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-12-31 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("") + ylab("Daily Views")
DayAhead<-reactive({
dayheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-31 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("") + ylab("Daily Views")
)
dayheadchart
dayheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
View(dayheadchart)
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("") + ylab("Daily Views")
dayheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(dayheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("2018") + ylab("Day Ahead Price")
Intraday<-reactive({
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(Intradaychart, aes(datetime, IntradayPrice)) + geom_line() +
xlab("") + ylab("Daily Views")
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
)
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
ggplot(Intradaychart, aes(datetime, IntradayPrice)) + geom_line() +
xlab("2018") + ylab("Intra Day Price")
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC"))
%>% ggplot(Intradaychart, aes(datetime, IntradayPrice)) + geom_line() +
xlab("2018") + ylab("Intra Day Price")
d4 <- d3 %>%
select(datetime, TMIN, TMAX,TAVG) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 3)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Temerature Variation")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800","#00e70b")) +
theme_minimal()
d4 <- d1 %>%
select(datetime, TMIN, TMAX,TAVG) %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-08-01 01:00:00", tz="UTC")) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 3)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Temerature Variation")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800","#00e70b")) +
theme_minimal()
dayaheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
###Manual range test
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
d4 <- d1 %>%
select(datetime, TMIN, TMAX,TAVG) %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC")) %>%
gather(key = "variable", value = "value", -datetime)
head(d4, 3)
ggplot(d4, aes(datetime, value)) + geom_line() +
xlab("") + ylab("Temerature Variation")
ggplot(d4, aes(x = datetime, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("#00AFBB", "#E7B800","#00e70b")) +
theme_minimal()
ggplot(Intradaychart, aes(datetime, IntradayPrice)) + geom_line() +
xlab("2018") + ylab("Intra Day Price")
test<-d1[-which(d1$IntradayPrice %in% boxplot.stats(d1$IntradayPrice)$out), ]
dayaheadchart <- test %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
ggplot(dayaheadchart, aes(datetime, DayaheadPrice._EUR_MWh)) + geom_line() +
xlab("2018") + ylab("Day Ahead Price")
###Manual range test
Intradaychart <- test %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
ggplot(Intradaychart, aes(datetime, IntradayPrice)) + geom_line() +
xlab("2018") + ylab("Intra Day Price")
y<-aggregate(d1, by=week, FUN=mean)
y<-aggregate(d1, by=datetime, FUN=mean)
ggplot(Intradaychart, aes(datetime, IntradayPrice)) + geom_line() +
xlab("2018") + ylab("Intra Day Price")
View(d1)
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
ggplot(loaddiff, aes(datetime, diffloadforecast)) + geom_line() +
xlab("") + ylab("Skewness Load Forecast") +  geom_line(aes(color = "#00AFBB"), size = 1)
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
d1<-d1[-which(d1$IntradayPrice %in% boxplot.stats(d1$IntradayPrice)$out), ]
###skewness between  forecast vs actual
d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
save(d1,Intradaychart,dayaheadchart, file="database.RData")
runApp('GitHub/electric_delware/Shiny/delaware_hackathon')
Sys.setenv(TZ='GMT')
write.csv(d1,"dataset.csv")
getwd()
#
# ###merging data
# myvars <- c("datetime", "ActualTotalLoad")
# newdata <- d2[myvars]
# d1<-merge(newdata,d3,by="datetime",all = TRUE)
#
# d1<-d1[-which(d1$IntradayPrice %in% boxplot.stats(d1$IntradayPrice)$out), ]
# ###skewness between  forecast vs actual
#
# d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
setwd("C:\Users\aparihar\Documents\GitHub\electric_delware\Shiny\delaware_hackathon")
#
# ###merging data
# myvars <- c("datetime", "ActualTotalLoad")
# newdata <- d2[myvars]
# d1<-merge(newdata,d3,by="datetime",all = TRUE)
#
# d1<-d1[-which(d1$IntradayPrice %in% boxplot.stats(d1$IntradayPrice)$out), ]
# ###skewness between  forecast vs actual
#
# d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
setwd("C:\\Users\\aparihar\\Documents\\GitHub\\electric_delware\\Shiny\\delaware_hackathon")
d1<-read.csv("dataset.csv")
runApp()
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
dayaheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
class(d1$datetile)
class(d1$datetime)
d1<-read.csv("dataset.csv")
d1$datetime<-as.POSIXct(d1$datetime)
Intradaychart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
dayaheadchart <- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
runApp()
library(shinydashboard)
runApp()
runApp()
runApp()
d1<- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
# ###merging data
# myvars <- c("datetime", "ActualTotalLoad")
# newdata <- d2[myvars]
# d1<-merge(newdata,d3,by="datetime",all = TRUE)
#
# d1<-d1[-which(d1$IntradayPrice %in% boxplot.stats(d1$IntradayPrice)$out), ]
# ###skewness between  forecast vs actual
#
# d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
#setwd("C:\\Users\\aparihar\\Documents\\GitHub\\electric_delware\\Shiny\\delaware_hackathon")
d1<-read.csv("dataset.csv")
d1$datetime<-as.POSIXct(d1$datetime)
d1<- d1 %>% filter(datetime >= as.POSIXct("2018-01-01 01:00:00", tz="UTC") & datetime <= as.POSIXct("2018-12-31 01:00:00", tz="UTC"))
# ###merging data
# myvars <- c("datetime", "ActualTotalLoad")
# newdata <- d2[myvars]
# d1<-merge(newdata,d3,by="datetime",all = TRUE)
#
# d1<-d1[-which(d1$IntradayPrice %in% boxplot.stats(d1$IntradayPrice)$out), ]
# ###skewness between  forecast vs actual
#
# d1$diffloadforecast<-as.integer(d1$Dayahead_Load.Forecast-d1$ActualTotalLoad)
#setwd("C:\\Users\\aparihar\\Documents\\GitHub\\electric_delware\\Shiny\\delaware_hackathon")
d1<-read.csv("dataset.csv")
d1$datetime<-as.POSIXct(d1$datetime)
